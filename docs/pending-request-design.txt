Problem:
========
When an OutgoingQueue writes a Request to the underlying connection we
consider it now in flight and should add it to a collection of blocks
we are waiting to receive from that peer. OutgoingQueue are driven by
an internal goroutine to prevent one slow peer from holding up a writes.
As such this new goroutine needs to write to a data structure which the
"protocol" goroutine must read from as it perform "ticks" in the protocol so
the problem of locking arises.

Soln 1:
=======

Add a buffered channel of PendingRequest(peerId, index, begin) back into protocol
goroutine. It's buffered to achieve good throughput as lots of these messages will
be in flight. The problem is closing a peer we cannot know which