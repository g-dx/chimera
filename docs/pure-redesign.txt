Refactor:
=========

+ Messages
----------

Strip methods from messages. This allows them to become simple.

type ProtocolMessage interface {}
type Choke struct{}
...
type Have int
type Request struct { index, begin, length }
.. etc

func messageLength(pm ProtocolMessage) int {

}

func messageId(pm ProtocolMessage) int {

}

This means we can drop sync.Pools for these types.

+ PeerWireState
---------------

Capture key protocol state in int

type PeerWireState byte

func (pws PeerWireState) choked() PeerWireState {
    return pws << 1
}

+ Pure
------

- Picker should be made side-effect free
- Choker should be made side-effect free
- Message handling probably can't be side-effect free without lots of work

+ PeerState
-----------

type PeerState struct {
    wire WireState
    pending set[Block]
    downloaded counter
    uploaded counter
}

type Block uint64
func toBlock(index, begin int) Block {
    return uint64(index) * pieceSize + uint64(begin)
    // do bitshifting?
}

+ MessageHandler
---------------

onMessage(pm ProtocolMessage, p Peer, mp PieceMap, net chan<-ProtocolMessage, disk chan<- DiskMessage) (Peer)

+ Queue
-------

- These need a channel to send blocks back to protocol on choke
