TODO:
=========

+ PeerWireState
===============
Capture key protocol state in int

type PeerWireState byte

func (pws PeerWireState) choked() PeerWireState {
    return pws << 1
}

etc

+ Pure
------

- Picker should be made side-effect free
- Choker should be made side-effect free
- Message handling probably can't be side-effect free without lots of work

+ PeerState
-----------

type PeerState struct {
    wire WireState
    pending set[Block]
    downloaded counter
    uploaded counter
}

type BlockOffset uint64
func toOffset(index, begin int) BlockOffset {
    return uint64(index) * pieceSize + uint64(begin)
    // do bitshifting?
}

+ Batch Peer Message Handling
=============================
Again adopt the batching technique. Pass the entire message list to Peer.onMessage(...) so that we don't copy-by-value
for Cancel, Request, etc... The signature of the new method should probably be:

func OnMessages(pm []ProtocolMessage, mp PieceMap, s *Statistics) (error, []DiskOp, []ProtocolMessage, WireState) {}

Maybe...?

+ Deduplicate outgoing writes
=============================
The code to perform writes is duplicated.

+ Add Incoming&Outgoing Adaptive Buffer Sizing
==============================================
Straightforward for outgoing. If we flush before the flush timer fires X times in a row then double
buffer size. Similarly if the flush timer causes network writes X times in a row and the buffer is
less than half full halve the buffer size.

Incoming not too sure....

+ Simpifly PeerIdentity
=======================
Currently this is a pointer to a struct. Really we want an opaque value. We can change this to be:

type PeerIdentity string

Which is immutable and can be passed around by value as a string is a glorified slice.
TODO: We need to check if this does indeed result only copying a pointer?